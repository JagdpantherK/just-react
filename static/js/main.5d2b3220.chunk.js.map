{"version":3,"sources":["reportWebVitals.js","components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Square","props","react_default","a","createElement","className","highlightWinSquares","onClick","updateStateOnClick","value","Board","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","highlightSquares","i","winningSquares","indexOf","generateRow","index","max","rows","push","renderSquare","generateBoard","columns","board","key","inherits","createClass","_this2","highlight","components_Square","squares","React","Component","Game","initialize","history","fill","location","col","row","active","moveNumber","xIsNext","stepNumber","toggle","state","reset","setState","jumpTo","step","forEach","item","handleClick","slice","Math","floor","calculateWinner","prevState","toggleMoves","lines","_lines$i","slicedToArray","b","c","status","win","player","filter","current","result","gameStatus","moves","map","move","desc","sort","components_Board","ReactDOM","createRoot","document","getElementById","render","StrictMode","components_Game"],"mappings":"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","file":"static/js/main.5d2b3220.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nconst Square = props => {\n  return (\n    <button\n      className={props.highlightWinSquares}\n      onClick={props.updateStateOnClick}\n    >\n      {props.value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\nimport \"../index.css\";\n\nclass Board extends React.Component {\n  highlightSquares = i => {\n    if (this.props.winningSquares.length > 0) {\n      if (this.props.winningSquares.indexOf(i) > -1) {\n        return \"square winningSquares\";\n      } else {\n        return \"square\";\n      }\n    } else {\n      return \"square\";\n    }\n  };\n\n  renderSquare(i) {\n    let highlight = this.highlightSquares(i);\n    return (\n      <Square\n        key={i}\n        highlightWinSquares={highlight}\n        value={this.props.squares[i]}\n        updateStateOnClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  generateRow = (index, max) => {\n    let rows = [];\n\n    for (index; index < max; index++) {\n      rows.push(this.renderSquare(index));\n    }\n    return rows;\n  };\n\n  generateBoard = (columns, rows) => {\n    let board = [];\n\n    /**\n     * Generate (col * row, here, 3 * 3 = 9) squares\n     */\n    for (let i = 0; i < columns * rows; i++) {\n      /**\n       * Generate columns.\n       *\n       * Only allow multiples of \"number of columns\".\n       * For example, if number of columns is 3, then,\n       * 3, 6, 9.\n       */\n      if (i % columns === 0) {\n        board.push(\n          <div className=\"board-row\" key={i}>\n            {this.generateRow(i, i + columns)}\n          </div>\n        );\n      }\n    }\n    return board;\n  };\n\n  render() {\n    return (\n      <div>\n        <div>{this.generateBoard(3, 3)}</div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"../index.css\";\n\nclass Game extends React.Component {\n  /**\n   * Initial state of the game\n   */\n  initialize = () => {\n    return {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          location: {\n            col: 0,\n            row: 0\n          },\n          active: false,\n          moveNumber: 0\n        }\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n      toggle: false\n    };\n  };\n\n  state = this.initialize();\n\n  reset = () => {\n    this.setState(this.initialize());\n  };\n\n  jumpTo = step => {\n    let history = this.state.history;\n\n    history.forEach(item => {\n      item.active = false;\n    });\n\n    history[step].active = true;\n    this.setState({\n      history: history,\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  };\n\n  handleClick = i => {\n    /**\n     * If we jumped to some previous step, and then make\n     * a new move from that point, we throw away all \"future\"\n     * history that will now become irrelevant.\n     *\n     * slice(startingPoint, endPoint)\n     *\n     * startingPoint - Array index from where the \"slicing\" starts.\n     * endPoint - All array indices less than endPoint will be included in \"slicing\"\n     */\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const columns = 3;\n\n    /**\n     * Calculate location of square when clicked\n     */\n    const col = Math.floor(i % columns) + 1;\n    const row = Math.floor(i / columns) + 1;\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    /**\n     * concat() method does not mutate the Array\n     * unlike Array.push().\n     */\n    this.setState(prevState => ({\n      history: history.concat([\n        {\n          squares: squares,\n          location: {\n            col: col,\n            row: row\n          },\n          active: false,\n          moveNumber: history.length\n        }\n      ]),\n      xIsNext: !prevState.xIsNext,\n      stepNumber: history.length\n    }));\n  };\n\n  toggleMoves = () => {\n    const toggle = !this.state.toggle;\n    this.setState({\n      toggle: toggle\n    });\n  };\n\n  calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    let result = {\n      status: \"\",\n      win: {}\n    };\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        result = {\n          status: \"win\",\n          win: { player: squares[a], squares: [a, b, c] }\n        };\n        return result;\n      }\n    }\n    let tempSq = squares.filter(item => item === null);\n    if (tempSq.length === 0) {\n      result = { status: \"draw\", win: {} };\n      return result;\n    }\n    return null;\n  };\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const result = this.calculateWinner(current.squares);\n    const gameStatus = result && result.status ? result.status : null;\n\n    const moves = history.map((move, index) => {\n      const desc = index ? \"Go to move #\" + index : \"Go to game start\";\n\n      let active = \" \";\n      if (move.active) {\n        active = \"active\";\n      } else {\n        active = \"normal\";\n      }\n      return (\n        <li key={index}>\n          <button\n            className=\"active game-board-button\"\n            key={`${move.location.col}_${move.location.row}`}\n            onClick={() => this.jumpTo(index)}\n          >\n            {`${desc} (${move.location.col}, ${move.location.row})`}\n          </button>\n        </li>\n      );\n    });\n\n    /**\n     * If this.state.toggle is \"true\", sort in\n     * \"decending order\" and vice versa.\n     */\n    moves.sort((a, b) => {\n      if (this.state.toggle) {\n        return b.key - a.key;\n      } else {\n        return a.key - b.key;\n      }\n    });\n\n    let status;\n\n    if (gameStatus === \"win\") {\n      status = `Winner: ${result.win.player}`;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n    return (\n      <div className=\"game\">\n        {/** If there is a draw, hide the game board and show \n          \"Play again\" button */\n        gameStatus === \"draw\" ? (\n          <div className=\"draw\">\n            <h2>Draw!</h2>\n            <button className=\"game-button\" onClick={() => this.reset()}>Play again</button>\n          </div>\n        ) : (\n          /** Otherwise, show the game board */\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              winningSquares={gameStatus === \"win\" ? result.win.squares : []}\n              onClick={(i, col, row) => this.handleClick(i, col, row)}\n            />\n            {/** Depending upon the state of the game, either show \n              \"Play again\" button or \"Reset game\" button */\n            gameStatus === \"win\" ? (\n              <div className=\"win\">\n                <h2>{`\"${result.win.player}\" is winner!`}</h2>\n                <button className=\"game-button\" onClick={() => this.reset()}>Play again</button>\n              </div>\n            ) : (\n              <div className=\"reset\">\n                <button className=\"game-button\" onClick={() => this.reset()}>Reset game</button>\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"game-info\">\n          <div>{status}</div>\n          {/** Show the toggle button only if there are two or more moves to sort */\n          history.length > 1 ? (\n            <button className=\"game-board-button\" onClick={() => this.toggleMoves()}>Toggle moves</button>\n          ) : (\n            \"\"\n          )}\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Game from \"./components/Game\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <Game/>\n    </React.StrictMode>\n);\n\nreportWebVitals();\n"],"sourceRoot":""}